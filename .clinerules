# Project Intelligence

This file captures important patterns, preferences, and project intelligence that help me work more effectively.

## Critical Implementation Paths

- Data flow: [Streamlit UI] → [View Layer] → [Service Layer] → [Data Layer] → [WIX API]
- Database operations: Use the Factory Pattern to create database connections.
- Report generation: Retrieve data, process data, and display the report.
- Duplicate management: Process duplicate groups and execute merges.

## User Preferences and Workflow

- Documentation approach: Prefer local, comprehensive documentation over relying solely on online resources.
- API integration: Abstract Wix API calls through a service layer to maintain clean separation of concerns.
- Error handling: Implement robust error handling with clear user feedback and logging.
- Performance: Optimize for both speed and memory usage, especially for large datasets.

## Project-Specific Patterns

- Wix API wrapper: Use the custom wrapper in `src/wix_api.py` for all Wix API interactions.
- Report structure: Follow the established pattern in `src/reports/implementations/` for new reports.
- Database access: Always use the Factory Pattern to create database connections.
- Memory Bank updates: Keep documentation current, especially after significant changes.

## Known Challenges

- Wix API rate limits: Be mindful of the 100 req/min and 10,000 req/day limits.
- Large dataset handling: Implement pagination and efficient data processing.
- Authentication management: Securely handle API keys and user credentials.
- Error handling: Gracefully handle API errors and provide meaningful feedback.

## Evolution of Project Decisions

- Documentation approach: Initially relied on online Wix documentation, now maintaining comprehensive local documentation in `docs/wix-api/`.
- Report system: Evolved from simple functions to a structured system with base classes and implementations.
- Database layer: Moved from direct SQLite access to an abstracted layer with interfaces and factories.
- UI components: Developed reusable components to maintain consistency across the application.

## Tool Usage Patterns

- Wix API documentation: Reference the local documentation in `docs/wix-api/` for API details and examples.
- Memory Bank: Update after significant changes, especially to document new patterns or decisions.
- Testing: Write tests for new functionality, focusing on both unit and integration tests.
- Error handling: Use try/except blocks with specific error types and meaningful error messages.
